name: Build solution

on:
  workflow_dispatch:

jobs:
  build_job_react:
    name: Build the react frontend
    runs-on: windows-2022
    defaults:
      run:
        working-directory: frontends/React2024
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.4.0
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.15.0
          cache: 'pnpm'
          cache-dependency-path: frontends/React2024/pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build frontend
        run: pnpm build

      - name: Upload compiled frontend
        uses: actions/upload-artifact@v4
        with:
          name: react2024-dist
          path: frontends/React2024/dist
          if-no-files-found: error
  build_job_backend:
    name: Build the ASP.NET backend
    runs-on: windows-2022
    needs: build_job_react
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        
      - name: Set up .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
          
      - name: Download React build artifact
        uses: actions/download-artifact@v4
        with:
          name: react2024-dist
          path: backend\myADMonitor\wwwroot
          
      - name: Restore dependencies
        working-directory: backend\myADMonitor
        run: dotnet restore
        
      - name: Build solution (Release)
        working-directory: backend\myADMonitor
        run: dotnet build --configuration Release --no-restore

      - name: Publish backend app
        working-directory: backend\myADMonitor
        run: dotnet publish myADMonitor.csproj --configuration Release --self-contained true --runtime win-x64 /p:PublishSingleFile=true /p:PublishTrimmed=false /p:IncludeAllContentForSelfExtract=false --output ..\publish

        


      - name: Verify publish folder contents
        shell: pwsh
        run: |
          Write-Host "Published files:"
          Get-ChildItem -Recurse backend\publish
          
      - name: Upload published backend
        uses: actions/upload-artifact@v4
        with:
          name: backend-publish
          path: backend\publish

  package_zip:
    name: Package final zip
    runs-on: windows-2022
    needs: build_job_backend
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Download backend publish
        uses: actions/download-artifact@v4
        with:
          name: backend-publish
          path: build\backend

      - name: Remove files excluded from release package
        shell: pwsh
        run: |
          $filesToRemove = @(
            "appsettings.Development.json",
            "aspnetcorev2_inprocess.dll",
            "myADMonitor.pdb",
            "myADMonitor.staticwebassets.endpoints.json",
            "web.config"
          )

          foreach ($file in $filesToRemove) {
            $matchedFiles = Get-ChildItem -Path "build\backend" -Recurse -Filter $file -File -ErrorAction SilentlyContinue

            if (-not $matchedFiles) {
              Write-Host "‚ÑπÔ∏è  File not found (skipping): $file"
              continue
            }

            foreach ($match in $matchedFiles) {
              Remove-Item $match.FullName -Force
              Write-Host "üóëÔ∏è  Removed: $($match.FullName)"
            }
          }

      - name: Get version from csproj
        id: get_version
        shell: pwsh
        run: |
          Write-Host "üü¶ Starting version extraction from csproj..."
          $csproj = "backend\myADMonitor\myADMonitor.csproj"
          Write-Host "Reading file: $csproj"

          [xml]$xml = Get-Content $csproj
          $version = ($xml.Project.PropertyGroup | ForEach-Object { $_.Version } | Where-Object { $_ -and $_.Trim() } | Select-Object -First 1)

          if (-not $version) {
          $version = "0.0.${{ github.run_number }}"
          Write-Host "‚ö†Ô∏è  No <Version> tag found, using fallback: $version"
          } else {
          Write-Host "‚úÖ Found <Version>: $version"
          }

          "version=$version" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          Write-Host "‚úÖ Version value written to GITHUB_OUTPUT: $version"

      - name: Create final zip
        id: create_zip
        shell: pwsh
        run: |
          $v = '${{ steps.get_version.outputs.version }}'
          $zipName = "myADMonitor-v$v-singlefile.zip"
          Compress-Archive -Path "build\backend\*" -DestinationPath $zipName
          echo "zipName=$zipName" >> $env:GITHUB_OUTPUT

      - name: Upload final zip
        uses: actions/upload-artifact@v4
        with:
          name: myADMonitor-final
          path: ${{ steps.create_zip.outputs.zipName }}
